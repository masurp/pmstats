% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/print_coeff.r
\name{print_coeff}
\alias{print_coeff}
\title{Prints individual coefficients for inline reporting}
\usage{
print_coeff(object, var_label = NULL, var_predict = NULL, b = TRUE,
  se = TRUE, ci = TRUE, p = TRUE, beta = FALSE)
}
\arguments{
\item{object}{A dataframe resulting from \code{result_table}. Important: The dataframe needs to be print-ready (i.e, the argument \code{print = TRUE} must be used!).}

\item{var_label}{A character value indicating which coefficient should be printed (draws from the label column in the dataframe).}

\item{var_predict}{Predictor variable that should be printed.}

\item{b}{Should the unstandardized effect be printed?}

\item{se}{Should the standard error be printed?}

\item{ci}{Should the confidence intervals be printed?}

\item{p}{Should the p-value be printed?}

\item{beta}{Should the standarized coefficient be printed?}
}
\value{
A string representing a latex code that can be used in inline reporting in Rmarkdown documents.
}
\description{
This function takes the output of \code{result_table} and transforms it into latex-code to be used in a rmarkdown file. There are two ways to specify which relationship or effect should be printed: 1) If the relationships are labelled in the result table that is passed to the function, the argument \code{var_label} can be used to specify which effect should be printed; 2) If the result table does not contain an labels, the argument \code{var_predict} can be used to specify the predictor variable of the effect that should be printed.
}
\examples{
## Example 1: Reporting effects from a structural equation modelling

# Estimate the structural equation model
model <- '
  # latent variables
  ind60 =~ x1 + x2 + x3
  dem60 =~ y1 + y2 + y3 + y4
  dem65 =~ y5 + y6 + y7 + y8
  
  # regressions
  dem60 ~ ind60
  dem65 ~ ind60 + dem60
  
  # residual covariances
  y1 ~~ y5
  y2 ~~ y4 + y6
  y3 ~~ y7
  y4 ~~ y8
  y6 ~~ y8
'

# Fitting model
fit <- lavaan::sem(model,
data = PoliticalDemocracy)

# First step (print = TRUE is mandatory!)
results <- result_table(fit, regressions = TRUE, new_labels = c("H1", "H2", "H3"), print = TRUE)

# Second step
print_coeff(results, var_label = "H1")
print_coeff(results, "H2", se = FALSE, beta = TRUE)


## Example 2: Reporting effects from a multilevel model

# Estimate the multilevel model
model <- lmerTest::lmer(Reaction ~ 1 + Days + (1 | Subject), sleepstudy)

# First step (print = TRUE is mandatory!)
results <- result_table(model, print = TRUE)

# Second step
print_coeff(results, var_predict = "Days", ci = FALSE, p = FALSE)
}
